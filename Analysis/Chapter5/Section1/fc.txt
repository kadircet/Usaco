Fencing the Cows
Songzi Du & Skyphos
This is a 2D convex hulls problem - finding a convex polygon with minimum perimeter (or area) that encloses a set of points. Since N <= 10000, the standard gift-wrapping convex hulls algorithm ( O(N logN) ) will work very well. While the conceptualization of gift-wrapping algorithm is simple, coding it is something else :-)
#include <fstream.h>
#include <math.h>
#include <stdlib.h>

struct point {
    double  x;
    double  y;
    double  angle;
};

struct vector {
    double  i;
    double  j;
};

point   P[10000];
int     hull[10000];

int 
zcross (vector * u, vector * v)
{
    double  p = u->i * v->j - v->i * u->j;
    if (p > 0)
	return 1;
    if (p < 0)
	return -1;
    return 0;
}

int 
cmpP (const void *a, const void *b)
{
    if (((point *) a)->angle < ((point *) b)->angle)
	return -1;
    if (((point *) a)->angle > ((point *) b)->angle)
	return 1;
    return 0;
}

void 
main ()
{
    int     N, i, hullstart, hullend, a, b;
    double  midx, midy, length;
    vector  v1, v2;

    ifstream fin ("fc.in");
    fin >> N;
    midx = 0, midy = 0;
    for (i = 0; i < N; i++) {
	fin >> P[i].x >> P[i].y;
	midx += P[i].x;
	midy += P[i].y;
    }
    fin.close ();
    midx = (double) midx / N;
    midy = (double) midy / N;
    for (i = 0; i < N; i++)
	P[i].angle = atan2 (P[i].y - midy, P[i].x - midx);
    qsort (P, N, sizeof (P[0]), cmpP);

    hull[0] = 0;
    hull[1] = 1;
    hullend = 2;
    for (i = 2; i < N - 1; i++) {
	while (hullend > 1) {
	    v1.i = P[hull[hullend - 2]].x - P[hull[hullend - 1]].x;
	    v1.j = P[hull[hullend - 2]].y - P[hull[hullend - 1]].y;
	    v2.i = P[i].x - P[hull[hullend - 1]].x;
	    v2.j = P[i].y - P[hull[hullend - 1]].y;
	    if (zcross (&v1, &v2) < 0)
		break;
	    hullend--;
	}
	hull[hullend] = i;
	hullend++;
    }

    while (hullend > 1) {
	v1.i = P[hull[hullend - 2]].x - P[hull[hullend - 1]].x;
	v1.j = P[hull[hullend - 2]].y - P[hull[hullend - 1]].y;
	v2.i = P[i].x - P[hull[hullend - 1]].x;
	v2.j = P[i].y - P[hull[hullend - 1]].y;
	if (zcross (&v1, &v2) < 0)
	    break;
	hullend--;
    }
    hull[hullend] = i;

    hullstart = 0;
    while (true) {
	v1.i = P[hull[hullend - 1]].x - P[hull[hullend]].x;
	v1.j = P[hull[hullend - 1]].y - P[hull[hullend]].y;
	v2.i = P[hull[hullstart]].x - P[hull[hullend]].x;
	v2.j = P[hull[hullstart]].y - P[hull[hullend]].y;
	if (hullend - hullstart > 1 && zcross (&v1, &v2) >= 0) {
	    hullend--;
	    continue;
	}
	v1.i = P[hull[hullend]].x - P[hull[hullstart]].x;
	v1.j = P[hull[hullend]].y - P[hull[hullstart]].y;
	v2.i = P[hull[hullstart + 1]].x - P[hull[hullstart]].x;
	v2.j = P[hull[hullstart + 1]].y - P[hull[hullstart]].y;
	if (hullend - hullstart > 1 && zcross (&v1, &v2) >= 0) {
	    hullstart++;
	    continue;
	}
	break;
    }

    length = 0;
    for (i = hullstart; i <= hullend; i++) {
	a = hull[i];
	if (i == hullend)
	    b = hull[hullstart];
	else
	    b = hull[i + 1];
	length += sqrt ((P[a].x - P[b].x) * (P[a].x - P[b].x) + (P[a].y - P[b].y) * (P[a].y - P[b].y));
    }

    ofstream fout ("fc.out");
fout.setf (ios: :fixed);
    fout.precision (2);
    fout << length << '\n';
    fout.close ();
}
Here is an alternate solution from skyphos:

{ skyphos }
uses graph;

const
{  infile = 'fc.in';
  outfile = 'fc.out';}
  maxn = 10000;
  debug = false;

type
  Tpoint = record x, y : extended; end;

var
  P, L, R : array [1..maxn] of Tpoint;
  n : longint;
  ans : extended;
  infile, outfile : string;

procedure gen(n : longint);
var f : text;
  i : longint;
begin
  randomize;
  assign(f, infile);
  rewrite(f);
  writeln(f, n);
  for i := 1 to n do writeln(f, random(640), ' ', random(480));
  close(f);
end;

procedure indata;
var f : text;
  i : longint;
begin
  assign(f, infile);
  reset(f);
  read(f, n);
  for i := 1 to n do read(f, P[i].x, P[i].y);
  close(f);
end;

procedure qsort(l, r : longint);
var i, j : longint;
  x, t : Tpoint;
begin
  x := P[(l + r) div 2];
  i := l;
  j := r;
  repeat
    while (P[i].y < x.y) or ((P[i].y = x.y) and (P[i].x < x.x)) do inc(i);
    while (P[j].y > x.y) or ((P[j].y = x.y) and (P[j].x > x.x)) do dec(j);
    if i <= j then
    begin
      t := P[i];
      P[i] := P[j];
      P[j] := t;
      inc(i);
      dec(j);
    end;
  until i > j;
  if i < r then qsort(i, r);
  if j > l then qsort(l, j);
end;

function cw(p1, p2, p3 : Tpoint) : longint;
var c : extended;
begin
  c := p1.x * (p3.y - p2.y) +
       p2.x * (p1.y - p3.y) +
       p3.x * (p2.y - p1.y);
  if c < 0 then cw := -1 else
  if c > 0 then cw := +1 else cw := 0;
end;

function dist(a, b : Tpoint) : extended;
begin
  dist := sqrt(sqr(a.x - b.x) + sqr(a.y - b.y));
end;

procedure solve;
var
  lt, rt, i : longint;

  procedure draw;
  var gd, gm : integer;
    minc, maxc, scale : extended;
    i : longint;
    function sc(c : extended) : longint;
    begin sc := round((c - minc) * scale); end;

  begin
    gd := detect;
    initgraph(gd, gm, 'C:\BP70\BGI');
    minc := 1000000000;
    maxc := -1000000000;
    for i := 1 to n do
    begin
      if P[i].x < minc then minc := P[i].x;
      if P[i].y < minc then minc := P[i].y;
      if P[i].x > maxc then maxc := P[i].x;
      if P[i].y > maxc then maxc := P[i].y;
    end;
    if maxc - minc = 0 then maxc := maxc + 1;
    scale := 479 / (maxc - minc);
    for i := 1 to n do putpixel(sc(P[i].x), sc(P[i].y), WHITE);
    readln;
    line(sc(R[1].x), sc(R[1].y), sc(L[1].x), sc(L[1].y));
    line(sc(R[rt].x), sc(R[rt].y), sc(L[lt].x), sc(L[lt].y));
    for i := 1 to lt - 1 do
      line(sc(L[i].x), sc(L[i].y), sc(L[i + 1].x), sc(L[i + 1].y));
    for i := 1 to rt - 1 do
      line(sc(R[i].x), sc(R[i].y), sc(R[i + 1].x), sc(R[i + 1].y));
    readln;
    closegraph;
  end;

begin
  qsort(1, n);
  lt := 0;
  rt := 0;
  i := 1;
  while (i <= n) do
  begin
    while (lt >= 2) and (cw(P[i], L[lt], L[lt - 1]) = +1) do dec(lt);
    inc(lt); L[lt] := P[i];
    while (i + 1 <= n) and (P[i + 1].y = P[i].y) do inc(i);
    while (rt >= 2) and (cw(P[i], R[rt], R[rt - 1]) = -1) do dec(rt);
    inc(rt); R[rt] := P[i]; inc(i);
  end;
  ans := dist(L[1], R[1]) + dist(L[lt], R[rt]);
  for i := 1 to lt - 1 do ans := ans + dist(L[i], L[i + 1]);
  for i := 1 to rt - 1 do ans := ans + dist(R[i], R[i + 1]);
  if debug then draw;
end;

procedure outdata;
var f : text;
begin
  assign(f, outfile);
  rewrite(f);
  writeln(f, ans:0:2);
  close(f);
end;

begin
{  readln(infile);
  readln(outfile);}
  infile := 'fc.in';
  outfile := 'fc.out';
  indata;
  solve;
  outdata;
end.
